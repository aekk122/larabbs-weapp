<style lang='less'>
  .introduction {
    height: 3.3em;
  }
  .error-message {
    color: #E64340;
  }
  .avatar {
    width: 80px;
    height: 80px;
    display: block;
    border-radius: 50%;
  }
  .avatar-wrap {
    margin-top: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
  }
</style>
<template>
  <view class="page">
    <view class="page__bd">
      <form bindsubmit="submit">
        <view class="avatar-wrap">
          <image class="avatar" src="{{ user.avatar }}" @tap="updateAvatar"></image>
        </view>
        <!-- 填写姓名 -->
        <view class="weui-cells__title">姓名</view>
        <view class="weui-cells weui-cells_after-title">
          <view class="weui-cell weui-cell_input">
            <view class="weui-cell__bd">
              <input placeholder="请输入姓名" class="weui-input" name="name" value="{{ user.name }}" />
            </view>
            <view class="weui-cell__ft" wx:if="{{ errors.name }}">
              <icon type="warn" size="23" color="#E64340"></icon>
            </view>
          </view>
        </view>
        <!-- 姓名错误信息 -->
        <view class="weui-cells__tips error-message" wx:if="{{ errors.name }}">{{ errors.name[0] }}</view>

        <!-- 填写邮箱 -->
        <view class="weui-cells__title">邮箱</view>
        <view class="weui-cells weui-cells_after-title">
          <view class="weui-cell weui-cell_input">
            <view class="weui-cell__bd">
              <input placeholder="请输入邮箱" name="email" value="{{ user.email }}" class="weui-input" />
            </view>
            <view wx:if="{{ errors.email }}" class="weui-cell__ft">
              <icon type="warn" size="23" color="#E64340"></icon>
            </view>
          </view>
        </view>
        <!-- 邮箱错误信息 -->
        <view class="weui-cells__tips error-message" wx:if="{{ errors.email }}">{{ errors.email[0] }}</view>

        <!-- 填写简介 -->
        <view class="weui-cells__title">个人简介</view>
        <view class="weui-cells weui-cells_after-title">
          <view class="weui-cell">
            <view class="weui-cell__bd">
              <textarea name="introduction" placeholder="请输入简介" value="{{ user.introduction }}" class="weui-textarea introduction" />
            </view>
            <view class="weui-cell__ft" wx:if="{{ errors.introduction }}">
              <icon type="warn" size="23" color="#E64340"></icon>
            </view>
          </view>
        </view>
        <!-- 简介错误信息 -->
        <view class="weui-cells__tips error-message" wx:if="{{ errors.introduction }}">{{ errors.introduction[0] }}</view>
        <!-- 提交表单 -->
        <view class="weui-btn-area">
          <button class="weui-btn" type="primary" formType="submit">修改</button>
        </view>
      </form>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import api from '@/utils/api'

  export default class UserEdit extends wepy.page {
    config = {
      navigationBarTitleText: '修改个人信息'
    }
    data = {
      // 用户信息
      user: null,
      // 错误信息
      errors: null,
      // 头像 id
      avatarId: 0
    }
    async onShow() {
      // 获取当前用户信息
      this.user = await this.$parent.getCurrentUser()
      this.$apply()
    }
    // 表单提交
    async submit(e) {
      this.error = null
      try {
        // e.detail.value 为表单提交的数据
        let formData = e.detail.value

        // 当 avatarId 被设置过之后则增加到 avatar_image_id 中
        if (this.avatarId !== 0) {
          formData.avatar_image_id = this.avatarId
        }

        let editResponse = await api.authRequest({
          url: 'user',
          method: 'PUT',
          data: formData
        })

        // 设置报错信息
        if (editResponse.statusCode === 422) {
          this.errors = editResponse.data.errors
          this.$apply()
        }

        // 请求成功，缓存用户数据
        if (editResponse.statusCode === 200) {
          this.user = editResponse.data
          wepy.setStorageSync('user', editResponse.data)
          this.$apply()

          wepy.showToast({
            title: '修改成功',
            icon: 'success',
            duration: 2000
          })
        }
      } catch (err) {
        console.log(err)
        wepy.showModal({
          title: '提示',
          content: '服务器错误，请联系管理员'
        })
      }
    }
    methods = {
      async updateAvatar() {
        // 选择头像图片
        let image = await wepy.chooseImage({count: 1})

        try {
          // 获取选择的图片
          let avatar = image.tempFilePaths[0]

          // 调用上传图片接口
          let imageResponse = await api.updateFile({
            url: 'images',
            method: 'POST',
            name: 'image',
            formData: {
              type: 'avatar'
            },
            filePath: avatar
          })

          if (imageResponse.statusCode === 500) {
            wepy.showModal({
              title: '提示',
              content: '图片清晰度不够，宽和高需要 200px 以上'
            })
          }

          // 上传成功记录数据
          if (imageResponse.statusCode === 201) {
            // 小程序上传结果没有做 json.parsses, 手动处理
            let responseData = JSON.parse(imageResponse.data)
            this.user.avatar = responseData.path
            this.avatarId = responseData.id
            this.$apply()
          }
        } catch (err) {
          console.log(err)
          wepy.showModal({
            title: '提示',
            content: '服务器错误，请联系管理员'
          })
        }
      }
    }
  }
</script>
